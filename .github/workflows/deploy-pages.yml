name: Deploy GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [closed]
  schedule:
    # Update every hour
    - cron: '0 * * * *'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests python-dateutil

    - name: Generate submission data
      run: |
        python << 'EOF'
        import json
        import os
        import glob
        import requests
        from pathlib import Path
        from datetime import datetime, timezone
        import re

        def collect_submissions():
            """Collect all submission files and generate aggregated data"""
            submissions = []

            # Find all JSON submission files
            submission_files = []
            for track_dir in ['submissions/plotsense-2025-ml', 'submissions/plotsense-2025-dev']:
                if os.path.exists(track_dir):
                    for file_path in glob.glob(f"{track_dir}/*.json"):
                        if not file_path.endswith('TEMPLATE.json'):
                            submission_files.append(file_path)

            for file_path in submission_files:
                try:
                    with open(file_path, 'r') as f:
                        submission = json.load(f)

                    # Add file metadata
                    file_stat = os.stat(file_path)
                    submission['submitted_date'] = datetime.fromtimestamp(
                        file_stat.st_mtime, tz=timezone.utc
                    ).isoformat()
                    submission['file_path'] = file_path

                    # Infer tech stack from project description or default
                    if 'tech_stack' not in submission:
                        if submission.get('track') == 'PlotSense ML':
                            submission['tech_stack'] = ['Python', 'PlotSenseAI', 'Pandas', 'Scikit-learn']
                        else:
                            submission['tech_stack'] = ['JavaScript', 'PlotSenseAI', 'React', 'Node.js']

                    # Set default status (in production, this would come from validation results)
                    submission['status'] = 'pending'  # Default status

                    # Validate required fields
                    required_fields = ['id', 'track', 'project_name', 'team_name', 'repo_url']
                    if all(field in submission and submission[field] for field in required_fields):
                        submission['status'] = 'validated'

                    submissions.append(submission)

                except (json.JSONDecodeError, FileNotFoundError) as e:
                    print(f"Error processing {file_path}: {e}")
                    continue

            return submissions

        def generate_metrics(submissions):
            """Generate metrics and statistics"""
            if not submissions:
                return {
                    'total_submissions': 0,
                    'total_teams': 0,
                    'tracks': {'PlotSense ML': 0, 'PlotSense Dev': 0},
                    'status_counts': {'validated': 0, 'pending': 0, 'failed': 0},
                    'tech_stack_usage': {},
                    'team_sizes': {},
                    'submission_timeline': []
                }

            metrics = {
                'total_submissions': len(submissions),
                'total_teams': len(submissions),
                'tracks': {},
                'status_counts': {'validated': 0, 'pending': 0, 'failed': 0},
                'tech_stack_usage': {},
                'team_sizes': {},
                'submission_timeline': []
            }

            # Count tracks
            for track in ['PlotSense ML', 'PlotSense Dev']:
                metrics['tracks'][track] = len([s for s in submissions if s.get('track') == track])

            # Count statuses
            for status in ['validated', 'pending', 'failed']:
                metrics['status_counts'][status] = len([s for s in submissions if s.get('status') == status])

            # Tech stack usage
            for submission in submissions:
                if 'tech_stack' in submission:
                    for tech in submission['tech_stack']:
                        metrics['tech_stack_usage'][tech] = metrics['tech_stack_usage'].get(tech, 0) + 1

            # Team sizes
            for submission in submissions:
                if 'team_members' in submission:
                    size = len(submission['team_members'])
                    metrics['team_sizes'][str(size)] = metrics['team_sizes'].get(str(size), 0) + 1

            # Submission timeline (group by date)
            timeline = {}
            for submission in submissions:
                if 'submitted_date' in submission:
                    date = submission['submitted_date'][:10]  # YYYY-MM-DD
                    timeline[date] = timeline.get(date, 0) + 1

            metrics['submission_timeline'] = [{'date': date, 'count': count} for date, count in sorted(timeline.items())]

            return metrics

        # Main execution
        submissions = collect_submissions()
        metrics = generate_metrics(submissions)

        # Create output directory
        os.makedirs('docs/data', exist_ok=True)

        # Write submissions data
        with open('docs/data/submissions.json', 'w') as f:
            json.dump(submissions, f, indent=2, default=str)

        # Write metrics data
        with open('docs/data/metrics.json', 'w') as f:
            json.dump(metrics, f, indent=2, default=str)

        print(f"Processed {len(submissions)} submissions")
        print(f"Generated metrics: {metrics['total_submissions']} total submissions")

        EOF

    - name: Setup GitHub Pages
      uses: actions/configure-pages@v4

    - name: Upload artifacts
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'docs'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Update README with stats
      if: github.ref == 'refs/heads/main'
      run: |
        python << 'EOF'
        import json
        import re

        # Load metrics
        try:
            with open('docs/data/metrics.json', 'r') as f:
                metrics = json.load(f)
        except:
            metrics = {'total_submissions': 0, 'total_teams': 0}

        # Read current README
        with open('README.md', 'r') as f:
            readme = f.read()

        # Update submission validation badge with stats
        stats_line = f"![Total Submissions](https://img.shields.io/badge/Submissions-{metrics['total_submissions']}-blue) ![Teams](https://img.shields.io/badge/Teams-{metrics['total_teams']}-green)"

        # Insert stats after the validation badge
        pattern = r'(!\[Submission Validation\].*?\n)'
        replacement = f'\\1{stats_line}\n'

        new_readme = re.sub(pattern, replacement, readme)

        # Write updated README
        with open('README.md', 'w') as f:
            f.write(new_readme)

        print(f"Updated README with {metrics['total_submissions']} submissions")
        EOF

    - name: Commit updated README
      if: github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        if [[ -n $(git status --porcelain) ]]; then
          git add README.md
          git commit -m "ðŸ“Š Update submission stats in README

          ðŸ¤– Generated with Claude Code

          Co-Authored-By: Claude <noreply@anthropic.com>"
          git push
        else
          echo "No changes to commit"
        fi